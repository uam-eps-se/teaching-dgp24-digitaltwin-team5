name: Lint-Test-and-Deploy

on:
  push:
    branches:
      - dev
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - closed

jobs:
  back-lint-and-test:
    runs-on: ubuntu-latest
    env:
      DJANGO_DEBUG: True
      DATABASE_URL: sqlite:////tmp/db.sqlite3
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Lint backend code (Python)
        run: pylint storm/* --rcfile=.pylintrc
      - name: Run Django tests
        working-directory: storm
        run: python3 manage.py test

  front-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'pnpm'
          cache-dependency-path: 'storm-ui/pnpm-lock.yaml'
      - name: Install Node dependencies
        working-directory: storm-ui
        run: pnpm install --frozen-lockfile
      - name: Lint frontend code (React TS)
        working-directory: storm-ui
        run: pnpm lint

  docker-publish-back:
    if: ${{ (github.ref_name == 'main') && (github.event.pull_request.merged) }}
    runs-on: ubuntu-latest
    needs: 
      - back-lint-and-test
      - front-lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Build and push Docker image
        run: |
          docker build --network=host -t ${{ secrets.DOCKER_USERNAME }}/$DOCKER_REPOSITORY .
          docker push ${{ secrets.DOCKER_USERNAME }}/$DOCKER_REPOSITORY:latest

  deploy:
    if: ${{ (github.ref_name == 'main') && (github.event.pull_request.merged) }}
    runs-on: ubuntu-latest
    needs: docker-publish-back
    steps:
      - name: Deploy Backend API on Render
        run: curl -X POST "https://api.render.com/deploy/srv-ctgr8gjgbbvc738um9v0?key=${{ secrets.RENDER_API_KEY }}"
      - name: Deploy Frontend on Render
        run: curl -X POST "https://api.render.com/deploy/srv-ctgr3fij1k6c73a60ufg?key=${{ secrets.RENDER_APP_KEY }}"
